// Generated by gencpp from file plan_path/ins_p2.msg
// DO NOT EDIT!


#ifndef PLAN_PATH_MESSAGE_INS_P2_H
#define PLAN_PATH_MESSAGE_INS_P2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_path
{
template <class ContainerAllocator>
struct ins_p2_
{
  typedef ins_p2_<ContainerAllocator> Type;

  ins_p2_()
    : Week(0)
    , Time(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , Lat(0.0)
    , Lon(0.0)
    , Altitude(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , Base(0.0)
    , NSV1(0)
    , NSV2(0)
    , Status(0)
    , Age(0)
    , War(0)  {
    }
  ins_p2_(const ContainerAllocator& _alloc)
    : Week(0)
    , Time(0.0)
    , Heading(0.0)
    , Pitch(0.0)
    , Roll(0.0)
    , gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)
    , Lat(0.0)
    , Lon(0.0)
    , Altitude(0.0)
    , Ve(0.0)
    , Vn(0.0)
    , Vu(0.0)
    , Base(0.0)
    , NSV1(0)
    , NSV2(0)
    , Status(0)
    , Age(0)
    , War(0)  {
  (void)_alloc;
    }



   typedef uint16_t _Week_type;
  _Week_type Week;

   typedef float _Time_type;
  _Time_type Time;

   typedef float _Heading_type;
  _Heading_type Heading;

   typedef float _Pitch_type;
  _Pitch_type Pitch;

   typedef float _Roll_type;
  _Roll_type Roll;

   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;

   typedef double _Lat_type;
  _Lat_type Lat;

   typedef double _Lon_type;
  _Lon_type Lon;

   typedef float _Altitude_type;
  _Altitude_type Altitude;

   typedef float _Ve_type;
  _Ve_type Ve;

   typedef float _Vn_type;
  _Vn_type Vn;

   typedef float _Vu_type;
  _Vu_type Vu;

   typedef float _Base_type;
  _Base_type Base;

   typedef uint8_t _NSV1_type;
  _NSV1_type NSV1;

   typedef uint8_t _NSV2_type;
  _NSV2_type NSV2;

   typedef uint8_t _Status_type;
  _Status_type Status;

   typedef uint8_t _Age_type;
  _Age_type Age;

   typedef uint8_t _War_type;
  _War_type War;





  typedef boost::shared_ptr< ::plan_path::ins_p2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_path::ins_p2_<ContainerAllocator> const> ConstPtr;

}; // struct ins_p2_

typedef ::plan_path::ins_p2_<std::allocator<void> > ins_p2;

typedef boost::shared_ptr< ::plan_path::ins_p2 > ins_p2Ptr;
typedef boost::shared_ptr< ::plan_path::ins_p2 const> ins_p2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_path::ins_p2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_path::ins_p2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plan_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'plan_path': ['/home/try/CPPP/pathing/catkin_paththird/src/plan_path/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::ins_p2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::ins_p2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::ins_p2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::ins_p2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::ins_p2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::ins_p2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_path::ins_p2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fa664b35412fb167a6b9895943ab9e1";
  }

  static const char* value(const ::plan_path::ins_p2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fa664b35412fb16ULL;
  static const uint64_t static_value2 = 0x7a6b9895943ab9e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_path::ins_p2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_path/ins_p2";
  }

  static const char* value(const ::plan_path::ins_p2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_path::ins_p2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 Week\n\
float32 Time\n\
float32 Heading\n\
float32 Pitch\n\
float32 Roll\n\
float32 gyro_x\n\
float32 gyro_y\n\
float32 gyro_z\n\
float32 acc_x\n\
float32 acc_y\n\
float32 acc_z\n\
float64 Lat\n\
float64 Lon\n\
float32 Altitude\n\
float32 Ve\n\
float32 Vn\n\
float32 Vu\n\
float32 Base\n\
uint8 NSV1\n\
uint8 NSV2\n\
uint8 Status\n\
uint8 Age\n\
uint8 War\n\
";
  }

  static const char* value(const ::plan_path::ins_p2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_path::ins_p2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Week);
      stream.next(m.Time);
      stream.next(m.Heading);
      stream.next(m.Pitch);
      stream.next(m.Roll);
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
      stream.next(m.Lat);
      stream.next(m.Lon);
      stream.next(m.Altitude);
      stream.next(m.Ve);
      stream.next(m.Vn);
      stream.next(m.Vu);
      stream.next(m.Base);
      stream.next(m.NSV1);
      stream.next(m.NSV2);
      stream.next(m.Status);
      stream.next(m.Age);
      stream.next(m.War);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ins_p2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_path::ins_p2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_path::ins_p2_<ContainerAllocator>& v)
  {
    s << indent << "Week: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Week);
    s << indent << "Time: ";
    Printer<float>::stream(s, indent + "  ", v.Time);
    s << indent << "Heading: ";
    Printer<float>::stream(s, indent + "  ", v.Heading);
    s << indent << "Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Roll);
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
    s << indent << "Lat: ";
    Printer<double>::stream(s, indent + "  ", v.Lat);
    s << indent << "Lon: ";
    Printer<double>::stream(s, indent + "  ", v.Lon);
    s << indent << "Altitude: ";
    Printer<float>::stream(s, indent + "  ", v.Altitude);
    s << indent << "Ve: ";
    Printer<float>::stream(s, indent + "  ", v.Ve);
    s << indent << "Vn: ";
    Printer<float>::stream(s, indent + "  ", v.Vn);
    s << indent << "Vu: ";
    Printer<float>::stream(s, indent + "  ", v.Vu);
    s << indent << "Base: ";
    Printer<float>::stream(s, indent + "  ", v.Base);
    s << indent << "NSV1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NSV1);
    s << indent << "NSV2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.NSV2);
    s << indent << "Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Status);
    s << indent << "Age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Age);
    s << indent << "War: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.War);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_PATH_MESSAGE_INS_P2_H
