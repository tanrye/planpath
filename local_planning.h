// Generated by gencpp from file plan_path/local_planning.msg
// DO NOT EDIT!


#ifndef PLAN_PATH_MESSAGE_LOCAL_PLANNING_H
#define PLAN_PATH_MESSAGE_LOCAL_PLANNING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_path
{
template <class ContainerAllocator>
struct local_planning_
{
  typedef local_planning_<ContainerAllocator> Type;

  local_planning_()
    : time(0)
    , id(0)
    , vehicle_speed(0.0)
    , heading(0.0)
    , path_data()
    , path_num(0)
    , path_info(0)
    , path_x()//拟合出的中线上的点
    , path_y()
    , left_x()
    , left_y()
    , right_x()
    , right_y()  {
      path_data.assign(0);
  }
  local_planning_(const ContainerAllocator& _alloc)
    : time(0)
    , id(0)
    , vehicle_speed(0.0)
    , heading(0.0)
    , path_data()
    , path_num(0)
    , path_info(0)
    , path_x(_alloc)
    , path_y(_alloc)
    , left_x(_alloc)
    , left_y(_alloc)
    , right_x(_alloc)
    , right_y(_alloc)  {
  (void)_alloc;
      path_data.assign(0);
  }



   typedef uint32_t _time_type;
  _time_type time;

   typedef uint32_t _id_type;
  _id_type id;

   typedef float _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef float _heading_type;
  _heading_type heading;

   typedef boost::array<uint32_t, 20>  _path_data_type;
  _path_data_type path_data;

   typedef uint16_t _path_num_type;
  _path_num_type path_num;

   typedef uint16_t _path_info_type;
  _path_info_type path_info;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _path_x_type;
  _path_x_type path_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _path_y_type;
  _path_y_type path_y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _left_x_type;
  _left_x_type left_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _left_y_type;
  _left_y_type left_y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _right_x_type;
  _right_x_type right_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _right_y_type;
  _right_y_type right_y;





  typedef boost::shared_ptr< ::plan_path::local_planning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_path::local_planning_<ContainerAllocator> const> ConstPtr;

}; // struct local_planning_

typedef ::plan_path::local_planning_<std::allocator<void> > local_planning;

typedef boost::shared_ptr< ::plan_path::local_planning > local_planningPtr;
typedef boost::shared_ptr< ::plan_path::local_planning const> local_planningConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_path::local_planning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_path::local_planning_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plan_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'plan_path': ['/home/wang/catkin_paththird/src/plan_path/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::local_planning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::local_planning_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::local_planning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::local_planning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::local_planning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::local_planning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_path::local_planning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6aabd91f1f782c62c741162243fb158b";
  }

  static const char* value(const ::plan_path::local_planning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6aabd91f1f782c62ULL;
  static const uint64_t static_value2 = 0xc741162243fb158bULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_path::local_planning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_path/local_planning";
  }

  static const char* value(const ::plan_path::local_planning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_path::local_planning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 time\n\
uint32 id\n\
float32 vehicle_speed\n\
float32 heading\n\
uint32[20] path_data\n\
uint16 path_num\n\
uint16 path_info\n\
int32[] path_x\n\
int32[] path_y\n\
int32[] left_x\n\
int32[] left_y\n\
int32[] right_x\n\
int32[] right_y\n\
";
  }

  static const char* value(const ::plan_path::local_planning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_path::local_planning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.id);
      stream.next(m.vehicle_speed);
      stream.next(m.heading);
      stream.next(m.path_data);
      stream.next(m.path_num);
      stream.next(m.path_info);
      stream.next(m.path_x);
      stream.next(m.path_y);
      stream.next(m.left_x);
      stream.next(m.left_y);
      stream.next(m.right_x);
      stream.next(m.right_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct local_planning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_path::local_planning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_path::local_planning_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "vehicle_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "path_data[]" << std::endl;
    for (size_t i = 0; i < v.path_data.size(); ++i)
    {
      s << indent << "  path_data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.path_data[i]);
    }
    s << indent << "path_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.path_num);
    s << indent << "path_info: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.path_info);
    s << indent << "path_x[]" << std::endl;
    for (size_t i = 0; i < v.path_x.size(); ++i)
    {
      s << indent << "  path_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.path_x[i]);
    }
    s << indent << "path_y[]" << std::endl;
    for (size_t i = 0; i < v.path_y.size(); ++i)
    {
      s << indent << "  path_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.path_y[i]);
    }
    s << indent << "left_x[]" << std::endl;
    for (size_t i = 0; i < v.left_x.size(); ++i)
    {
      s << indent << "  left_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.left_x[i]);
    }
    s << indent << "left_y[]" << std::endl;
    for (size_t i = 0; i < v.left_y.size(); ++i)
    {
      s << indent << "  left_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.left_y[i]);
    }
    s << indent << "right_x[]" << std::endl;
    for (size_t i = 0; i < v.right_x.size(); ++i)
    {
      s << indent << "  right_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.right_x[i]);
    }
    s << indent << "right_y[]" << std::endl;
    for (size_t i = 0; i < v.right_y.size(); ++i)
    {
      s << indent << "  right_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.right_y[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_PATH_MESSAGE_LOCAL_PLANNING_H
