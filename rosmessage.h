// Generated by gencpp from file plan_path/RosMessage.msg
// DO NOT EDIT!


#ifndef PLAN_PATH_MESSAGE_ROSMESSAGE_H
#define PLAN_PATH_MESSAGE_ROSMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plan_path
{
template <class ContainerAllocator>
struct RosMessage_
{
  typedef RosMessage_<ContainerAllocator> Type;

  RosMessage_()
    : Big_x()
    , Big_y()
    , Red_x()
    , Red_y()
    , Blue_x()
    , Blue_y()
    , Yellow_x()
    , Yellow_y()
    , hour(0)
    , minute(0)
    , second(0)
    , u_second(0)  {
    }
  RosMessage_(const ContainerAllocator& _alloc)
    : Big_x(_alloc)
    , Big_y(_alloc)
    , Red_x(_alloc)
    , Red_y(_alloc)
    , Blue_x(_alloc)
    , Blue_y(_alloc)
    , Yellow_x(_alloc)
    , Yellow_y(_alloc)
    , hour(0)
    , minute(0)
    , second(0)
    , u_second(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Big_x_type;
  _Big_x_type Big_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Big_y_type;
  _Big_y_type Big_y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Red_x_type;
  _Red_x_type Red_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Red_y_type;
  _Red_y_type Red_y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Blue_x_type;
  _Blue_x_type Blue_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Blue_y_type;
  _Blue_y_type Blue_y;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Yellow_x_type;
  _Yellow_x_type Yellow_x;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _Yellow_y_type;
  _Yellow_y_type Yellow_y;

   typedef int32_t _hour_type;
  _hour_type hour;

   typedef int32_t _minute_type;
  _minute_type minute;

   typedef int32_t _second_type;
  _second_type second;

   typedef int64_t _u_second_type;
  _u_second_type u_second;





  typedef boost::shared_ptr< ::plan_path::RosMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plan_path::RosMessage_<ContainerAllocator> const> ConstPtr;

}; // struct RosMessage_

typedef ::plan_path::RosMessage_<std::allocator<void> > RosMessage;

typedef boost::shared_ptr< ::plan_path::RosMessage > RosMessagePtr;
typedef boost::shared_ptr< ::plan_path::RosMessage const> RosMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plan_path::RosMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plan_path::RosMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plan_path

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'plan_path': ['/home/wang/catkin_pathtwo/src/plan_path/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::RosMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plan_path::RosMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::RosMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plan_path::RosMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::RosMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plan_path::RosMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plan_path::RosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c562ca48de4285e4eef925ce480fb6f5";
  }

  static const char* value(const ::plan_path::RosMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc562ca48de4285e4ULL;
  static const uint64_t static_value2 = 0xeef925ce480fb6f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::plan_path::RosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plan_path/RosMessage";
  }

  static const char* value(const ::plan_path::RosMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plan_path::RosMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] Big_x\n\
int32[] Big_y\n\
int32[] Red_x\n\
int32[] Red_y\n\
int32[] Blue_x\n\
int32[] Blue_y\n\
int32[] Yellow_x\n\
int32[] Yellow_y\n\
int32 hour\n\
int32 minute\n\
int32 second\n\
int64 u_second\n\
";
  }

  static const char* value(const ::plan_path::RosMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plan_path::RosMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Big_x);
      stream.next(m.Big_y);
      stream.next(m.Red_x);
      stream.next(m.Red_y);
      stream.next(m.Blue_x);
      stream.next(m.Blue_y);
      stream.next(m.Yellow_x);
      stream.next(m.Yellow_y);
      stream.next(m.hour);
      stream.next(m.minute);
      stream.next(m.second);
      stream.next(m.u_second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RosMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plan_path::RosMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plan_path::RosMessage_<ContainerAllocator>& v)
  {
    s << indent << "Big_x[]" << std::endl;
    for (size_t i = 0; i < v.Big_x.size(); ++i)
    {
      s << indent << "  Big_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Big_x[i]);
    }
    s << indent << "Big_y[]" << std::endl;
    for (size_t i = 0; i < v.Big_y.size(); ++i)
    {
      s << indent << "  Big_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Big_y[i]);
    }
    s << indent << "Red_x[]" << std::endl;
    for (size_t i = 0; i < v.Red_x.size(); ++i)
    {
      s << indent << "  Red_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Red_x[i]);
    }
    s << indent << "Red_y[]" << std::endl;
    for (size_t i = 0; i < v.Red_y.size(); ++i)
    {
      s << indent << "  Red_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Red_y[i]);
    }
    s << indent << "Blue_x[]" << std::endl;
    for (size_t i = 0; i < v.Blue_x.size(); ++i)
    {
      s << indent << "  Blue_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Blue_x[i]);
    }
    s << indent << "Blue_y[]" << std::endl;
    for (size_t i = 0; i < v.Blue_y.size(); ++i)
    {
      s << indent << "  Blue_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Blue_y[i]);
    }
    s << indent << "Yellow_x[]" << std::endl;
    for (size_t i = 0; i < v.Yellow_x.size(); ++i)
    {
      s << indent << "  Yellow_x[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Yellow_x[i]);
    }
    s << indent << "Yellow_y[]" << std::endl;
    for (size_t i = 0; i < v.Yellow_y.size(); ++i)
    {
      s << indent << "  Yellow_y[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Yellow_y[i]);
    }
    s << indent << "hour: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hour);
    s << indent << "minute: ";
    Printer<int32_t>::stream(s, indent + "  ", v.minute);
    s << indent << "second: ";
    Printer<int32_t>::stream(s, indent + "  ", v.second);
    s << indent << "u_second: ";
    Printer<int64_t>::stream(s, indent + "  ", v.u_second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAN_PATH_MESSAGE_ROSMESSAGE_H
